
package com.cst438.controller;

import com.cst438.domain.*;
import com.cst438.dto.EnrollmentDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class StudentController {

    @Autowired
    private EnrollmentRepository enrollmentRepository;

    @Autowired
    private SectionRepository sectionRepository;

    @Autowired
    private UserRepository userRepository;

    private User validateStudent(int studentId) {

        User user = userRepository.findById(studentId).orElse(null);

        if (user == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Unknown studentId");
        }

        if (!user.getType().equals("STUDENT")) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid studentId");
        }

        return user;
    }

    // student gets transcript showing list of all enrollments
    // studentId will be temporary until Login security is implemented
    // example URL  /transcript?studentId=19803
    @GetMapping("/transcripts")
    public List<EnrollmentDTO> getTranscript(
       @RequestParam("studentId") int studentId)
    {
        // list course_id, sec_id, title, credit, grade in chronological order
        // user must be a student
        // hint: use enrollment repository method findEnrollmentByStudentIdOrderByTermId

        validateStudent(studentId);

        List<EnrollmentDTO> enrollmentDTOs = new ArrayList<>();
        for (Enrollment enrollment : enrollmentRepository.findEnrollmentsByStudentIdOrderByTermId(studentId)) {
            enrollmentDTOs.add(EnrollmentDTO.fromEntity(enrollment));
        }

        return enrollmentDTOs;
    }

    // student gets a list of their enrollments for the given year, semester
    // user must be student
    // studentId will be temporary until Login security is implemented
    @GetMapping("/enrollments")
    public List<EnrollmentDTO> getSchedule(
       @RequestParam("year") int year,
       @RequestParam("semester") String semester,
       @RequestParam("studentId") int studentId)
    {
        // hint: use enrollment repository method findByYearAndSemesterOrderByCourseId

        validateStudent(studentId);

        List<EnrollmentDTO> enrollmentDTOs = new ArrayList<>();
        for (Enrollment enrollment : enrollmentRepository
            .findByYearAndSemesterOrderByCourseId(year, semester, studentId))
        {
            enrollmentDTOs.add(EnrollmentDTO.fromEntity(enrollment));
        }

        return enrollmentDTOs;
    }

    // student adds enrollment into a section
    // user must be student
    // return EnrollmentDTO with enrollmentId generated by database
    @PostMapping("/enrollments/sections/{sectionNo}")
    public EnrollmentDTO addCourse(
        @PathVariable int sectionNo,
        @RequestParam("studentId") int studentId)
    {
        // check that the Section entity with primary key sectionNo exists
        // check that today is between addDate and addDeadline for the section
        // check that student is not already enrolled into this section
        // create a new enrollment entity and save.  The enrollment grade will
        // be NULL until instructor enters final grades for the course.

        Section section = sectionRepository.findById(sectionNo).orElse(null);

        if (section == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Unknown sectionNo");
        }

        User user = validateStudent(studentId);

        Term term = section.getTerm();
        Date now = Date.from(Instant.now());

        if (now.before(term.getAddDate()) || now.after(term.getAddDeadline())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Course cannot be added at this time");
        }

        Enrollment existingEnrollment = enrollmentRepository
            .findEnrollmentBySectionNoAndStudentId(sectionNo, studentId);

        if (existingEnrollment != null) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "studentId is already enrolled in sectionNo");
        }

        Enrollment newEnrollment = new Enrollment();
        newEnrollment.setUser(user);
        newEnrollment.setSection(section);
        enrollmentRepository.save(newEnrollment);

        return EnrollmentDTO.fromEntity(newEnrollment);
    }

    // student drops a course
    // user must be student
    @DeleteMapping("/enrollments/{enrollmentId}")
    public void dropCourse(
        @PathVariable("enrollmentId") int enrollmentId)
    {
        // check that today is not after the dropDeadline for section

        Enrollment enrollment = enrollmentRepository.findById(enrollmentId).orElse(null);

        if (enrollment == null) {
            return;
        }

        if (!enrollment.getUser().getType().equals("STUDENT")) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Only students can drop a course");
        }

        Date dropDeadline = enrollment.getSection().getTerm().getDropDeadline();

        if (Date.from(Instant.now()).after(dropDeadline)) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Drop deadline has been exceeded");
        }

        // TODO: This throws an exception
        enrollmentRepository.delete(enrollment);
    }
}
